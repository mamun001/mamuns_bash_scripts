
echo
if [ -z "$1" ];
  then
    echo
    echo this script needs Change Number as arg1
    echo
    echo No ARG1. EXITING
    echo
    sleep 3
    exit 1
  else
    echo we have no-empty arg1. good.
    echo
    CRN=$1
    echo Using $CRN as Change Number for File Names
    sleep 3
fi
echo
echo



echo
echo This script will yield a list of approver teams based on list of CIs
sleep 3

echo
echo the input file is cilist
echo
sleep 3

FF=cilist
if [ -f $FF ];
then
   echo "File $FF exists."
else
   echo "File $FF does not exist."
   echo make a file called $FF and put filer names there.
   echo and then rerun the script
   exit 0
fi

#echo removing junk files
touch junk1
touch count.1
rm junk*
rm count.*
echo
sleep 2


echo how many lines are there in cilist?
echo
wc -l cilist
echo
echo __________________________
echo
sleep 5
echo

#remove black lines from cilist
echo removing blank lines from cilist
sed '/^$/d' cilist > junk1
cp junk1 cilist
rm junk1
#wc -l cilist
echo removing black lines done

#removing lines with 3 characters or less
echo
echo removing lines with 3 or less chars
echo
sleep 3
sed -r '/^.{,3}$/d' cilist > junk.67
cp junk.67 cilist

#
# based on 420 1: ci 5: config 7: support but has commas, 45: change groups 
# we are now using just 4 columns, easier (quotes and commans taken out)
# used sed for that?
# commans withing cells are now :
# config never has motre than group


# sort and uniq cilist
echo sorting and uniq-ing cilist
sort cilist | uniq | sort > junk_uniq
echo done
# junk.uniq now has the  clean CIs that we care about


# VI warning
touch junk.vi
rm junk.vi
touch junk.vi
grep -i esx junk_uniq > junk.vi
grep -i vm junk_uniq >> junk.vi
  if [ -s junk.vi ];
     then
       echo ____________________________________________
       echo
       echo "junk.vi is NOT of zero size"
       echo " WARNING: this filer has ESX or VMs"
       wc -l junk.vi
       echo
       echo "We have to be extra careful"
       echo ____________________________________________
       sleep 7
     else
       echo "no vi on this list of cis"
       echo "thats good. proceeding."
  fi
#cat junk.vi

# create junk1
touch junk1 junk.debug
rm junk1 junk.debug
touch junk1 junk.debug

#grab one ci at a time and find its data in the sm9 file
# had to ad a caret in the grep becaus eit was catching hostname
# matches from fields other than host field
echo
echo finding each of the cis in the sm9data file
echo
echo takes 1 minute per 200 CIs
echo
for i in $( cat junk_uniq ); do
    #echo $i
    grep -h -i ^$i sm9data420_4cols.txt | cut -d, -f2,3,4 >> junk1
    grep -h -i ^$i sm9data420_4cols.txt | cut -d, -f1,2,3,4 >> junk.debug
   done
echo done

# junk1 now has all the groups with commas, spaces and :
#lets save junk1 because will need it later in the script
cp junk1 junk.hosts.w.groups

# taking out :
echo taking out colons
sed 's/:/,/g' junk1 > junk2
#junk2 now just all : taken out
echo done


# splitting all found groups names into columns (one group per line)
# so that we append them later
cut -d, -f1 junk2 > junk11
cut -d, -f2 junk2 > junk12
cut -d, -f3 junk2 > junk13
cut -d, -f4 junk2 > junk14
cut -d, -f5 junk2 > junk15
cut -d, -f6 junk2 > junk16
cut -d, -f7 junk2 > junk17
cut -d, -f8 junk2 > junk18
cut -d, -f9 junk2 > junk19


# appending all the columns in 1 file
touch junk_appended
rm junk_appended
touch junk_appended
for i in `seq 11 19`;
 do
  #echo $i
  cat junk$i >> junk_appended
  #echo ___________________________________
 done
# now junk_appended has a list groups but with duplicates


# sort uniq sort to produce the list of possible approvers
sort junk_appended | uniq | sort > junk.uniq.groups

# display
#echo 
#echo groups found. some may have too few servers
#cat junk.uniq.groups
#echo

# now we count
touch junk.countdata
rm junk.countdata
touch junk.countdata
for i in $( cat junk.uniq.groups ); do
            grep $i junk.hosts.w.groups > count.$i
            wc -l count.$i >> junk.countdata
        done


# now, sort and report
sort junk.countdata > junk1
uniq junk1 > junk2
echo _______________________________________
sort -nr junk2 > junk3
echo _______________________________________
# junk2 now has each groups and how in how many hosts they show up
cut -d" " -f1 junk3 > junk.c1
cut -d. -f2 junk3 > junk.c2
paste junk.c2 junk.c1 > junk4

cp junk4 $CRN.produced.teams
cp junk4 /cygdrive/c/cygwin64/$CRN.approvers_teams.csv
echo produced.teams and $CRN.produced.teams has the result
echo
echo done
